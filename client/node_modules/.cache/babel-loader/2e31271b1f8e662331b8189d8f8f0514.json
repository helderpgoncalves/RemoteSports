{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // This is just `./ReactInput.js` rewritten in Hooks.\n\n\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onKeyDown as onInputKeyDown } from '../inputControl'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"]);\n\n  var ownRef = useRef();\n  ref = ref || ownRef;\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onKeyDown]);\n\n  return React.createElement(InputComponent, _extends({}, rest, {\n    ref: ref,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\n\nInput = React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}","map":{"version":3,"sources":["../../source/react/Input.js"],"names":["onChange","onKeyDown","value","parse","format","inputComponent","InputComponent","rest","ownRef","useRef","ref","_onChange","useCallback","onInputChange","_onKeyDown","onInputKeyDown","isEmptyValue","Input","React","PropTypes","type","onCut","onPaste","func"],"mappings":"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","sourcesContent":["// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../inputControl'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst ownRef = useRef()\r\n\tref = ref || ownRef\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tref.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [ref, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}/>\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}"]},"metadata":{},"sourceType":"module"}