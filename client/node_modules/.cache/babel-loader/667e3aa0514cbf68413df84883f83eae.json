{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/user/GitHub/remotesports/client/src/components/MenuProfessor/MenuProfessor.js\";\nimport React, { Component } from \"react\";\nimport { auth, db } from \"../../firebase\";\nimport AsyncSelect from \"react-select/async\";\nimport { Button, TableRow, TextField } from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport ClassIcon from \"@material-ui/icons/Class\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { toast } from \"react-toastify\";\nimport CreateLesson from \"../CreateLesson/CreateLesson\";\n\nclass MenuProfessor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadOptions = async inputValue => {\n      inputValue = inputValue.toLowerCase().replace(/\\W/g, \"\");\n      return new Promise(resolve => {\n        db.collection(\"users\").orderBy(\"email\").startAt(inputValue).endAt(inputValue + \"\\uf8ff\").get().then(docs => {\n          if (!docs.empty) {\n            let recommendedTags = [];\n            docs.forEach(function (doc) {\n              const tag = {\n                name: doc.data().name,\n                school: doc.data().school,\n                value: doc.id,\n                label: doc.data().email\n              };\n              recommendedTags.push(tag);\n            });\n            return resolve(recommendedTags);\n          } else {\n            return resolve([]);\n          }\n        });\n      });\n    };\n\n    this.handleOnChange = tags => {\n      this.setState({\n        students: [...this.state.students, tags]\n      });\n    };\n\n    this.handleDeleteRow = e => {\n      var array = [...this.state.students]; // make a separate copy of the array\n\n      array.splice(e, 1);\n      this.setState({\n        students: array\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.createTurma = e => {\n      e.preventDefault();\n      const turma = this.state;\n      var docRef = db.collection(\"users\").doc(auth.currentUser.uid);\n      docRef.get().then(function (doc) {\n        if (doc.exists) {\n          var docRef2 = db.collection(\"classes\").doc(turma.nameClass.toUpperCase());\n          docRef2.set({\n            students: turma.students,\n            school: doc.data().school,\n            professor: doc.data().email\n          }).then(function () {\n            toast.success(`ðŸ¤ª Excellent! You create new class!`, {\n              position: \"top-right\",\n              autoClose: 5000,\n              hideProgressBar: true,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined\n            });\n          }).catch(function (error) {\n            console.error(\"Error writing document: \", error);\n            toast.error(error);\n          });\n        } else {\n          console.log(\"No such document!\");\n        }\n      }).catch(function (error) {\n        console.log(\"Error getting document:\", error);\n        toast.error(error);\n      });\n    };\n\n    this.getRows = () => {\n      let rows = [];\n      if (this.state.students) this.state.students.map(element => {\n        rows.push( /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: element.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: element.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: element.school\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: element => this.handleDeleteRow(element),\n              children: /*#__PURE__*/_jsxDEV(DeleteOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, element.label, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this));\n      });\n      return rows;\n    };\n\n    this.state = {\n      students: [],\n      nameClass: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pl-5 pr-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Search Student by Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AsyncSelect, {\n          loadOptions: this.loadOptions,\n          onChange: this.handleOnChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pl-5 pr-5 pt-4\",\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"School\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: this.getRows()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"mainInput\",\n            fullWidth: true,\n            required: true,\n            margin: \"normal\",\n            variant: \"outlined\",\n            type: \"text\",\n            name: \"nameClass\",\n            onChange: e => this.handleChange(e),\n            label: \"Class Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: e => this.createTurma(e),\n            disabled: Object.keys(this.state.students).length == 0 || !this.state.nameClass,\n            variant: \"contained\",\n            color: \"primary\",\n            size: \"large\",\n            startIcon: /*#__PURE__*/_jsxDEV(ClassIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 26\n            }, this),\n            children: \"CREATE CLASS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-5\",\n        children: /*#__PURE__*/_jsxDEV(CreateLesson, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default MenuProfessor;","map":{"version":3,"sources":["/Users/user/GitHub/remotesports/client/src/components/MenuProfessor/MenuProfessor.js"],"names":["React","Component","auth","db","AsyncSelect","Button","TableRow","TextField","Table","TableBody","TableCell","TableHead","ClassIcon","DeleteOutlined","toast","CreateLesson","MenuProfessor","constructor","props","loadOptions","inputValue","toLowerCase","replace","Promise","resolve","collection","orderBy","startAt","endAt","get","then","docs","empty","recommendedTags","forEach","doc","tag","name","data","school","value","id","label","email","push","handleOnChange","tags","setState","students","state","handleDeleteRow","e","array","splice","handleChange","target","createTurma","preventDefault","turma","docRef","currentUser","uid","exists","docRef2","nameClass","toUpperCase","set","professor","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","catch","error","console","log","getRows","rows","map","element","render","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { auth, db } from \"../../firebase\";\nimport AsyncSelect from \"react-select/async\";\nimport { Button, TableRow, TextField } from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport ClassIcon from \"@material-ui/icons/Class\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { toast } from \"react-toastify\";\nimport CreateLesson from \"../CreateLesson/CreateLesson\";\n\nclass MenuProfessor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      students: [],\n      nameClass: \"\",\n    };\n  }\n\n  loadOptions = async (inputValue) => {\n    inputValue = inputValue.toLowerCase().replace(/\\W/g, \"\");\n    return new Promise((resolve) => {\n      db.collection(\"users\")\n        .orderBy(\"email\")\n        .startAt(inputValue)\n        .endAt(inputValue + \"\\uf8ff\")\n        .get()\n        .then((docs) => {\n          if (!docs.empty) {\n            let recommendedTags = [];\n            docs.forEach(function (doc) {\n              const tag = {\n                name: doc.data().name,\n                school: doc.data().school,\n                value: doc.id,\n                label: doc.data().email,\n              };\n              recommendedTags.push(tag);\n            });\n            return resolve(recommendedTags);\n          } else {\n            return resolve([]);\n          }\n        });\n    });\n  };\n\n  handleOnChange = (tags) => {\n    this.setState({\n      students: [...this.state.students, tags],\n    });\n  };\n\n  handleDeleteRow = (e) => {\n    var array = [...this.state.students]; // make a separate copy of the array\n\n    array.splice(e, 1);\n\n    this.setState({\n      students: array,\n    });\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  createTurma = (e) => {\n    e.preventDefault();\n\n    const turma = this.state;\n\n    var docRef = db.collection(\"users\").doc(auth.currentUser.uid);\n    docRef\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          var docRef2 = db.collection(\"classes\").doc(turma.nameClass.toUpperCase())\n\n          docRef2\n            .set({\n              students: turma.students,\n              school: doc.data().school,\n              professor: doc.data().email\n            })\n            .then(function () {\n              toast.success(`ðŸ¤ª Excellent! You create new class!`, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n            })\n            .catch(function (error) {\n              console.error(\"Error writing document: \", error);\n              toast.error(error);\n            });\n        } else {\n          console.log(\"No such document!\");\n        }\n      })\n      .catch(function (error) {\n        console.log(\"Error getting document:\", error);\n        toast.error(error);\n      });\n  };\n\n  getRows = () => {\n    let rows = [];\n\n    if (this.state.students)\n      this.state.students.map((element) => {\n        rows.push(\n          <TableRow key={element.label}>\n            <TableCell>{element.name}</TableCell>\n            <TableCell>{element.label}</TableCell>\n            <TableCell>{element.school}</TableCell>\n            <TableCell>\n              <Button onClick={(element) => this.handleDeleteRow(element)}>\n                <DeleteOutlined />\n              </Button>\n            </TableCell>\n          </TableRow>\n        );\n      });\n    return rows;\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"pl-5 pr-5\">\n          <h3>Search Student by Email:</h3>\n          <AsyncSelect\n            loadOptions={this.loadOptions}\n            onChange={this.handleOnChange}\n          />\n        </div>\n        <div className=\"pl-5 pr-5 pt-4\">\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Email</TableCell>\n                <TableCell>School</TableCell>\n                <TableCell>Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>{this.getRows()}</TableBody>\n          </Table>\n          <br />\n          <form>\n            <TextField\n              id=\"mainInput\"\n              fullWidth\n              required\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"text\"\n              name=\"nameClass\"\n              onChange={(e) => this.handleChange(e)}\n              label=\"Class Name\"\n            />\n            <Button\n              onClick={(e) => this.createTurma(e)}\n              disabled={\n                Object.keys(this.state.students).length == 0 ||\n                !this.state.nameClass\n              }\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              startIcon={<ClassIcon />}\n            >\n              CREATE CLASS\n            </Button>\n          </form>\n        </div>\n        <div className=\"pt-5\">\n          <CreateLesson />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default MenuProfessor;\n"]},"metadata":{},"sourceType":"module"}