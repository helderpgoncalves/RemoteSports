function __$styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

import { createElement, Component } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function pad(num) {
    if (num < 10) {
        return "0" + num;
    }
    return "" + num;
}
function formatDate(dateString) {
    var dateTime = new Date(dateString);
    return [
        dateTime.getUTCFullYear(),
        pad(dateTime.getUTCMonth() + 1),
        pad(dateTime.getUTCDate()),
        "T",
        pad(dateTime.getUTCHours()),
        pad(dateTime.getUTCMinutes()) + "00Z"
    ].join("");
}
function buildUrl(event, useDataURL) {
    if (useDataURL === void 0) { useDataURL = false; }
    var url = [
        "BEGIN:VCALENDAR",
        "VERSION:2.0",
        "BEGIN:VEVENT",
        "URL:" + document.URL,
        "DTSTART:" + formatDate(event.startTime),
        "DTEND:" + formatDate(event.endTime),
        "SUMMARY:" + event.title,
        "DESCRIPTION:" + event.description,
        "LOCATION:" + event.location,
        "END:VEVENT",
        "END:VCALENDAR"
    ].join("\n");
    if (useDataURL) {
        return encodeURI("data:text/calendar;charset=utf8," + url);
    }
    else {
        return url;
    }
}
function downloadBlob(blob, filename) {
    var linkEl = document.createElement("a");
    linkEl.href = window.URL.createObjectURL(blob);
    linkEl.setAttribute("download", filename);
    document.body.appendChild(linkEl);
    linkEl.click();
    document.body.removeChild(linkEl);
}
function isIOSSafari() {
    var ua = window.navigator.userAgent;
    var iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
    var webkit = !!ua.match(/WebKit/i);
    return iOS && webkit && !ua.match(/CriOS/i);
}
function isIOSChrome() {
    var ua = window.navigator.userAgent;
    var iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
    return iOS && !!ua.match(/CriOS/i);
}

/**
 * @class ICalLink
 */
var ICalLink = /** @class */ (function (_super) {
    __extends(ICalLink, _super);
    function ICalLink(props) {
        var _this = _super.call(this, props) || this;
        _this.handleClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            var _a = _this.props, event = _a.event, filename = _a.filename;
            var url = buildUrl(event, isIOSSafari());
            var blob = new Blob([url], {
                type: "text/calendar;charset=utf-8"
            });
            // IE
            if (_this.isCrappyIE) {
                window.navigator.msSaveOrOpenBlob(blob, filename);
                return;
            }
            // Safari
            if (isIOSSafari()) {
                window.open(url, "_blank");
                return;
            }
            // Desktop
            downloadBlob(blob, filename);
        };
        _this.isCrappyIE = !!(typeof window !== "undefined" &&
            window.navigator.msSaveOrOpenBlob &&
            window.Blob);
        return _this;
    }
    ICalLink.prototype.render = function () {
        var _a = this.props, children = _a.children, otherProps = __rest(_a, ["children"]);
        return (createElement("a", __assign({ onClick: this.handleClick }, otherProps), children));
    };
    // FIXME - iOS Chrome doesn't support adding to iCal at the moment.
    // https://bugs.chromium.org/p/chromium/issues/detail?id=666211
    ICalLink.isSupported = !isIOSChrome();
    ICalLink.defaultProps = {
        filename: "download.ics",
        href: "#add-to-calendar"
    };
    return ICalLink;
}(Component));

export default ICalLink;
//# sourceMappingURL=index.es.js.map
